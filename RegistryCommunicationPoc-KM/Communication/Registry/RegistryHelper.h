#pragma once

#define RegistryComunicationPath L"Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\KDCom"
#define REGFLTR_CAPTURE_POOL_TAG 'PLFL'

typedef enum _CALLBACK_MODE {
    CALLBACK_MODE_PRE_NOTIFICATION_BLOCK,
    CALLBACK_MODE_PRE_NOTIFICATION_BYPASS,
    CALLBACK_MODE_POST_NOTIFICATION_OVERRIDE_ERROR,
    CALLBACK_MODE_POST_NOTIFICATION_OVERRIDE_SUCCESS,
    CALLBACK_MODE_TRANSACTION_REPLAY,
    CALLBACK_MODE_TRANSACTION_ENLIST,
    CALLBACK_MODE_MULTIPLE_ALTITUDE_BLOCK_DURING_PRE,
    CALLBACK_MODE_MULTIPLE_ALTITUDE_INTERNAL_INVOCATION,
    CALLBACK_MODE_MULTIPLE_ALTITUDE_MONITOR,
    CALLBACK_MODE_SET_CALL_CONTEXT,
    CALLBACK_MODE_SET_OBJECT_CONTEXT,
    CALLBACK_MODE_CAPTURE,
    CALLBACK_MODE_VERSION_BUGCHECK,
    CALLBACK_MODE_VERSION_CREATE_OPEN_V1,
} CALLBACK_MODE;

typedef struct _RMCALLBACK_CONTEXT {
    ULONG Notification;
    HANDLE Enlistment;
} RMCALLBACK_CONTEXT, * PRMCALLBACK_CONTEXT;

#define MAX_ALTITUDE_BUFFER_LENGTH 10

typedef struct _CALLBACK_CONTEXT {
    LIST_ENTRY CallbackCtxList;
    CALLBACK_MODE CallbackMode;
    HANDLE ProcessId;
    UNICODE_STRING Altitude;
    WCHAR AltitudeBuffer[MAX_ALTITUDE_BUFFER_LENGTH];
    LARGE_INTEGER Cookie;
    PRMCALLBACK_CONTEXT RMCallbackCtx;
    LONG ContextCleanupCount;
    LONG NotificationWithContextCount;
    LONG NotificationWithNoContextCount;
    LONG PreNotificationCount;
    LONG PostNotificationCount;
} CALLBACK_CONTEXT, * PCALLBACK_CONTEXT;

// Prototypes

inline PVOID RegOutData = NULL;
inline PVOID RegPrevData = NULL;
inline DWORD64 UmTargetProcId = NULL;
inline BOOLEAN TargetAcquired = FALSE;
static REGISTRY_INFORMATION RegistryInformation = { NULL };

auto RegistryQueryValue(PREGISTRY_INFORMATION pRegistryInformation) -> NTSTATUS;

auto RegFilterRegistryCallback(PVOID CallbackContext, PVOID Argument1, PVOID Argument2) -> NTSTATUS;